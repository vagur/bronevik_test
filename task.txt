= Тестовое задание: «Справочник сотрудников»
:doctype: article
:lang: ru
:author: Антон Прибора
:icons: font

== Задание

Необходимо сделать справочник сотрудников, используя предоставленный код.

Сотрудники обладают следующими свойствами:

. Уникальный идентификатор (положительное целое число).
. Фамилия, имя, отчество (строка/строки с максимальной длиной 255 символов).
. Должность (строка с максимальной длиной 255 символов).
. Пол (выпадающий список: "не указан", "муж.", "жен.").
. Дата рождения (дата, которая может быть не указана).
. Паспорт (текстовое поле с маской ввода `#### ######`).
. Мобильный телефон (текстовое поле с маской ввода `+7 (###) ##-##-###`).
. Адрес электронной почты (текстовое поле с проверкой на соответствие регулярному выражению `/^[\w\.-]+@[\w\.-]+$/`).

Необходимо сделать возможность *добавления*, *изменения* и *удаления* сотрудников.

[NOTE]
При удалении сотрудника из справочника запись в таблице базы данных должна сохраняться.

При выполнении любого действия со справочником должна сохраняться история изменений, в которой будет указано:

. над какой записью произвели действие;
. какое действие было произведено;
. какие поля изменились (также показать старые и новые значения полей);
. при добавлении новой записи в историю изменений должны записаться все свойства сотрудника с их значениями.

[example,caption="Пример: "]
.История изменений
===========
*22 августа 2014 13:00*: Добавлен новый сотрудник #123 «Иванов Сергей Петрович»:

* Фамилия: *Иванов*
* Имя: *Пётр*
* Отчество: *Петрович*
* Телефон: *+7 902 12-34-567*

'''

*22 августа 2014 14:00*: Изменения по сотруднику #123 «Иванов Сергей Петрович»:

* Изменено поле «*Имя*». Старое значение «*Сергей*». Новое значение «*Пётр*»
* Изменено поле «*Фамилия*». Старое значение «*Иванов*». Новое значение «*Петров*»

'''

*22 августа 2014 15:20*: Сотрудник #123 «Петров Пётр Петрович» был удалён
===========


[NOTE]
Необходимо предусмотреть, чтобы историю изменений можно было смотреть как по отдельному сотруднику,
так и по всему разделу клиентов.

== Порядок выполнения задания

Рекомендуется выполнять задание в следующем порядке:

. *Сделать таблицу в базе*.
. *Сделать контроллер для управления справочником*.
. *Сделать добавление / изменение / удаление записей*.
. Сделать историю изменений.
. Использовать json, маски ввода, javascript-календари.

== Критерии оценки задания

. Читабельность кода.
. Структура базы данных.
. Работоспособность кода.
. Отсутствие потенциально опасного кода.
. Работа в рамках ООП.

== Hints

* Список свойств сотрудника лучше объявить только один раз.